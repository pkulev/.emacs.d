#+title: Emacs configuration
#+property: header-args:elisp :tangle "init.el"

* About
  This is my emacs configuration, built with powers of =use-package= and =org-mode=.
  =use-package= allows declarative description of packages and it's settings, =org-mode=
  allows to represent this configuration as document and generate config from it.

** Usage
   Just clone repository to =~/.emacs.d= and run emacs.
   #+begin_src bash
     $ git clone git@github.com:pkulev/.emacs.d.git
     $ emacs
   #+end_src

** Where it works
   Here the matrix of distributions and environments i've tested my configuration deployment.

   |---------------+------------------------------------+----------------------------|
   | Emacs/Dist    | Emacs 26.2                         | Remacs 26.2                |
   |---------------+------------------------------------+----------------------------|
   | Fedora 29     | works                              | works (but expect freezes) |
   | Fedora 30     | works                              | works (but expect freezes) |
   | Centos 7      | works                              | not tested                 |
   | Gentoo        | works, but need to fix system deps | not tested                 |
   | Ubuntu 16 WSL | works, but need to fix system deps | not tested                 |
   | Gentoo        |                                    | not tested                 |
   | Termux        | doesn't work                       | not supported?             |
   |---------------+------------------------------------+----------------------------|

** Table of Contents                                                    :TOC@3:
- [[#about][About]]
  - [[#usage][Usage]]
  - [[#where-it-works][Where it works]]
- [[#package-management][Package management]]
  - [[#repositories][Repositories]]
  - [[#use-package][=use-package=]]
    - [[#environment-variables][Environment variables]]
    - [[#custom-variables-for-some-additional-control][Custom variables for some additional control]]
    - [[#use-package-dependencies][=use-package= dependencies]]
  - [[#system-package-management][System package management]]
  - [[#installation-from-sources][Installation from sources]]
  - [[#improvements-for-packageel][Improvements for =package.el=]]
  - [[#temporarily-package-installation][Temporarily package installation]]
  - [[#additional-packages][Additional packages]]
    - [[#anaphoric-macroses][Anaphoric macroses]]
    - [[#determine-if-current-buffer-indented-with-tabs-or-spaces][Determine if current buffer indented with tabs or spaces]]
- [[#help--manuals][Help & manuals]]
  - [[#better-help][Better help]]
  - [[#free-keys][Free keys]]
  - [[#which-key][Which key]]
  - [[#google-translate][Google translate]]
- [[#customize][Customize]]
- [[#gui-components--appearance][GUI Components / Appearance]]
  - [[#dont-show-intrusive-startup-message][Don't show intrusive startup message]]
  - [[#emacs-variables-that-defined-in-c-source-code][Emacs variables that defined in C source code]]
  - [[#emacs-c-source-code][Emacs C source code]]
  - [[#autorevert][Autorevert]]
  - [[#frame][Frame]]
  - [[#simple][Simple]]
  - [[#highlight-matching-parens][Highlight matching parens]]
  - [[#fonts--faces][Fonts & faces]]
    - [[#fira-code-font][Fira Code font]]
    - [[#current-line-highlighting][Current line highlighting]]
    - [[#diff-highlighting][Diff highlighting]]
    - [[#fringe-settings][Fringe settings]]
    - [[#reverse-im][=reverse-im=]]
  - [[#line-length-indication][Line length indication]]
  - [[#theme][Theme]]
    - [[#very-cool-theme][Very cool theme]]
  - [[#icons][Icons]]
  - [[#whistles][Whistles]]
- [[#buffer-management][Buffer management]]
  - [[#ibuffer][ibuffer]]
  - [[#ace-window][ace-window]]
- [[#dired][Dired]]
- [[#navigation][Navigation]]
  - [[#window-navigation][Window navigation]]
  - [[#paragraph-movement][Paragraph movement]]
  - [[#imenu-jumps][Imenu jumps]]
  - [[#avy][Avy]]
- [[#editing][Editing]]
  - [[#delete-selection][Delete selection]]
  - [[#multiple-cursors][Multiple cursors]]
  - [[#copy--paste-things][Copy & Paste things]]
    - [[#copy-as-format][Copy as format]]
    - [[#links][Links]]
- [[#password-management][Password management]]
- [[#shell-tools][Shell tools]]
  - [[#eshell-appearance][Eshell appearance]]
  - [[#eshell-completion-and-suggestion][Eshell completion and suggestion]]
  - [[#quickly-open-eshell-or-something-else-in-project][Quickly open eshell (or something else) in project]]
- [[#path][Path]]
  - [[#syncing-path][Syncing PATH]]
  - [[#autosaves][Autosaves]]
  - [[#quick-emacs-configuration-file-access][Quick emacs configuration file access]]
- [[#autocomplete][Autocomplete]]
  - [[#prescient][Prescient]]
  - [[#company][Company]]
  - [[#counsel][Counsel]]
  - [[#swiper][Swiper]]
  - [[#ivy][Ivy]]
- [[#containers-and-remote-servers][Containers and remote servers]]
  - [[#tramp][Tramp]]
    - [[#save-local-files-as-root][Save local files as root]]
  - [[#docker][Docker]]
- [[#programming-modes][Programming modes]]
  - [[#common][Common]]
    - [[#snippets][Snippets]]
    - [[#syntax-checking-and-linting][Syntax checking and linting]]
    - [[#env-projectile-integration][.env projectile integration]]
  - [[#projectile][Projectile]]
  - [[#translations][Translations]]
  - [[#lisp][Lisp]]
    - [[#emacs-lisp][Emacs Lisp]]
    - [[#common-lisp][Common Lisp]]
    - [[#scheme][Scheme]]
  - [[#python][Python]]
    - [[#elpy][ELPY]]
  - [[#web][Web]]
    - [[#js][JS]]
    - [[#html][HTML]]
  - [[#nim][Nim]]
  - [[#ocaml][Ocaml]]
  - [[#rust][Rust]]
- [[#git-things][Git things]]
  - [[#magit][Magit]]
  - [[#git-forges][Git forges]]
- [[#bookmarks][Bookmarks]]
- [[#email--messengers][Email & Messengers]]
- [[#productivity--task-management][Productivity & task management]]
  - [[#org-mode][Org mode]]
    - [[#generate-table-of-contents][Generate Table of Contents]]
    - [[#org-babel][Org babel]]
    - [[#yankpad][Yankpad]]
    - [[#utils][Utils]]
  - [[#productivity][Productivity]]
  - [[#calendar][Calendar]]
  - [[#corporative-services][Corporative services]]
- [[#after-config-read-hook][After config read hook]]
- [[#local-variables][Local variables]]

* Package management
  Initial bootstrapping and things related to package management.

  #+begin_src elisp
    ;; -*- lexical-binding: t -*-
    ;; This file was tangled (automatically generated) from `readme.org'
  #+end_src

** Repositories
   Set emacs package repositories.

   Temporary hack for GNU repository.
   #+begin_src elisp
     (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
   #+end_src

   #+begin_src elisp
     (require 'package)
     (setq package-enable-at-startup nil)

     (setq package-archives
           (append (eval (car (get 'package-archives 'standard-value)))
                   '(("org" . "http://orgmode.org/elpa/")
                     ("melpa" . "http://melpa.org/packages/")
                     ("elpy" . "https://jorgenschaefer.github.io/packages/"))))
     (package-initialize)
   #+end_src

** =use-package=
   Bootstrap =use-package= using built-in package.el.
   All further configuration will be performed using it's DSL.

   #+begin_src elisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package)
       (require 'use-package)
       (setq use-package-always-ensure t))
   #+end_src

*** Environment variables
    Set some rare used environment variables to control further configuration.
    #+begin_src elisp
      (when (getenv "FAST") (setq use-package-always-ensure nil))
      (when (getenv "STATS") (setq use-package-compute-statistics t))
    #+end_src

*** Custom variables for some additional control
    #+begin_src elisp
      (defvar my/after-config-read-hook (list)
        "Functions to call in the end of config.")
    #+end_src

*** =use-package= dependencies
    #+begin_src elisp
      (use-package bind-key
        :ensure t)

      (use-package delight
        :ensure t)
     #+end_src

** System package management
   =system-packages= allows to install packages via system package manager in
   a configurable way.
   #+begin_src elisp
     (use-package system-packages
       :ensure t
       :custom
       (system-packages-noconfirm t)
       :config
       ;; Termux has no `sudo'
       (when (executable-find "sudo")
         (setq system-packages-use-sudo t))
       ;; Overwrite guix even if it installed
       (when (string-match-p "redhat" system-configuration)
         (setq system-packages-package-manager 'dnf)))
   #+end_src

   #+begin_src elisp
     (use-package use-package-ensure-system-package
       :ensure t)
   #+end_src

** Installation from sources
     =Quelpa= allows to build and install packages from sources.
     =quelpa-use-package= is integration package.
     #+begin_src elisp
       (use-package quelpa
         :ensure t
         :custom (quelpa-update-melpa-p nil))

       (use-package quelpa-use-package
         :ensure t)
     #+end_src

** Improvements for =package.el=
   =paradox= can install packages asynchronously and has better UI for *M-x list-packages*.
   #+begin_src elisp
     (use-package paradox
       :ensure t
       :custom
       (paradox-execute-asynchronously t)
       :config
       (paradox-enable))
   #+end_src

** Temporarily package installation
   =try= installs package into temp directory without polluting /.emacs.d/.
   #+begin_src elisp
     (use-package try
       :ensure t)
   #+end_src

** Additional packages
   Packages that will be used further in this config.
*** Anaphoric macroses
    #+begin_src elisp
      (use-package anaphora
        :ensure t)
    #+end_src

    #+begin_src elisp
      (use-package f
        :ensure t)
    #+end_src

    #+begin_src elisp
      (use-package s
        :ensure t)
    #+end_src

*** Determine if current buffer indented with tabs or spaces
    #+begin_src elisp
      (use-package tos
        :ensure nil
        :quelpa
        (tos :repo "pkulev/tos.el"
             :fetcher github :upgrade t))
    #+end_src

    #+begin_src elisp
      (use-package infer-indentation-style
        :ensure nil
        :after tos
        :preface
        (defun infer-indentation-style-js ()
          "Sets proper values depending on buffer indentation mode."
          (when (tos-buffer-tabs?)
              (setq indent-tabs-mode t)))

        (defun infer-indentation-style-python ()
          "Sets proper values depending on buffer indentation mode."
          (if (tos-buffer-tabs?)
              (setq indent-tabs-mode t
                    python-indent-offset 4
                    tab-width 4)))
        (provide 'infer-indentation-style))
    #+end_src

* Help & manuals
** Better help
   #+begin_src elisp
     (use-package helpful
       :ensure t
       :bind
       (:map help-mode-map
             ("f" . #'helpful-callable)
             ("v" . #'helpful-variable)
             ("k" . #'helpful-key)
             ("F" . #'helpful-at-point)
             ("F" . #'helpful-function)
             ("C" . #'helpful-command)))
   #+end_src

** Free keys
   #+begin_src elisp
     (use-package free-keys
       :ensure t)
   #+end_src
** Which key
   #+begin_src elisp
     (use-package which-key
       :ensure t
       :delight
       :config
       (which-key-mode))
   #+end_src

** Google translate
   Translate in emacs! For example you can translate docstrings of messages from =telega.el=.
   #+begin_src elisp
     (use-package google-translate
       :ensure t
       :bind
       (:map mode-specific-map
             ("t p" . google-translate-at-point)
             ("t P" . google-translate-at-point-reverse)
             ("t t" . google-translate-query-translate)
             ("t T" . google-translate-query-translate-reverse))
       :custom
       (google-translate-default-source-language "en")
       (google-translate-default-target-language "ru"))
   #+end_src
* Customize
  #+begin_src elisp
    (use-package cus-edit
      :ensure nil
      :custom
      (custom-file "~/.emacs.d/custom-file.el"))
  #+end_src

  Host-specific private source of data
  #+begin_src elisp
    (use-package my/private-el
      :ensure nil
      :preface
      (defun my/private-el-load ()
        (load "~/.emacs.d/private.el" 'noerror))
      (provide 'my/private-el)
      :init
      (my/private-el-load))
  #+end_src

* GUI Components / Appearance
** Don't show intrusive startup message
   #+begin_src elisp
     (defun display-startup-echo-area-message ())
   #+end_src

** Emacs variables that defined in C source code
   #+begin_src elisp
     (use-package emacs
       :ensure nil
       :init
       (put 'narrow-to-page 'disabled nil)
       (put 'narrow-to-region 'disabled nil)
       (put 'downcase-region 'disabled nil)
       :hook
       ;; I want to see trailing spaces
       (prog-mode . (lambda () (setq show-trailing-whitespace t)))
       :custom
       (use-dialog-box nil "Dialogs via minibuffer only.")
       (tool-bar-mode nil "Disable toolbar.")
       (menu-bar-mode nil "Disable menubar.")
       (scroll-bar-mode nil "Disable scrollbar.")
       (blink-cursor-mode nil "Disable cursor blinking.")
       (scroll-step 1 "Scroll line by line.")
       (scroll-margin 4 "Top and bottom scrolling margin.")
       (scroll-conservatively 101 "If >100 then never recenter point.")
       (inhibit-splash-screen t "Don't show the splash screen.")
       (initial-scratch-message nil "Disable initial scratch message.")

       (indicate-empty-lines t "Visually indicate empty lines.")
       (indicate-buffer-boundaries 'left "Show buffer boundaries at left fringe.")
       (indent-tabs-mode nil "Tabs are evil.")
       (tab-width 4 "Sane default for me."))
   #+end_src

** Emacs C source code
   I quite often jump into C code from describe-* buffers.
   #+begin_src elisp
     (use-package find-func
       :ensure nil
       :custom
       (find-function-C-source-directory (expand-file-name "~/proj/emacs") "Emacs sources."))
   #+end_src

** Autorevert
   #+begin_src elisp
     (use-package autorevert
       :ensure nil
       :delight auto-revert-mode)
   #+end_src

** Frame
   Disable suspending (C-z), it's annoing and doesn't work properly with WSL.
   #+begin_src elisp
     (use-package frame
       :ensure nil
       :bind
       ("C-z" . nil)
       ("C-c C-z" . nil))
   #+end_src

** Simple
   #+begin_src elisp
     (use-package simple
       :ensure nil
       :delight
       (visual-line-mode)
       :bind
       ("C-k" . #'kill-whole-line)
       :config
       (defalias 'yes-or-no-p 'y-or-n-p)
       :custom
       (line-number-mode t "Show line number in modeline.")
       (column-number-mode t "Show column number in modeline.")
       (size-indication-mode t "Show file size in modeline.")
       (global-visual-line-mode t "Enable visual-line-mode."))
   #+end_src

** Highlight matching parens
   #+begin_src elisp
     (use-package paren
       :ensure nil
       :custom
       (show-paren-delay 0)
       :config
       (show-paren-mode t))
   #+end_src

** Fonts & faces
*** COMMENT Fira ligatures for emacs
    Doesn't work properly yet.
    #+begin_src elisp
      (use-package fira-code-symbol
        :ensure nil
        :delight
        :hook
        (lisp-mode-hook . fira-code-symbol)
        (geiser-mode-hook . fira-code-symbol)
        (python-mode-hook . fira-code-symbol)
        (tuareg-mode-hook . fira-code-symbol)
        :quelpa
        (fira-code-symbol :repo "pkulev/fira-code-symbol"
                          :fetcher github :upgrade t))
    #+end_src

*** COMMENT Hack font
    #+begin_src elisp
      (use-package faces
        :ensure nil
        :config
        (set-face-attribute 'default
                            nil
                            :family "Hack"
                            :weight 'regular
                            :width 'semi-condensed
                            :height 120)
    #+end_src

*** Fira Code font
    #+begin_src elisp
      (use-package faces
        :ensure nil
        :config
        (set-face-attribute 'default
                            nil
                            :family "FiraCode"
                            :weight 'semi-light
                            :width 'semi-condensed
                            :height 130))
    #+end_src

*** Current line highlighting

    #+begin_src elisp
    (use-package hl-line
      :ensure nil
      :config
      (global-hl-line-mode 1)
      (set-face-background 'hl-line "#3e4446")
      (set-face-foreground 'highlight nil))
    #+end_src

*** Diff highlighting
    #+begin_src elisp
      (use-package diff-hl
        :ensure t
        :defer t
        :after magit
        :hook
        (prog-mode . diff-hl-mode)
        (org-mode . diff-hl-mode)
        (dired-mode . diff-hl-dired-mode)
        (magit-post-refresh . diff-hl-magit-post-refresh))
    #+end_src

*** Fringe settings
    #+begin_src elisp
      (use-package fringe
        :ensure nil
        :custom
        (fringe-mode '(8 . 0)))
    #+end_src

*** =reverse-im=
    #+begin_src elisp
      (use-package reverse-im
        :ensure t
        :config
        (reverse-im-activate "russian-computer"))
    #+end_src

** Line length indication
   #+begin_src elisp
     (use-package fill-column-indicator
       :ensure t
       :custom
       (fci-rule-width 1)
       (fci-rule-color "cadetBlue4")
       (fci-rule-column 80)
       :hook (prog-mode . fci-mode))
   #+end_src
** Theme
*** COMMENT Cool theme
    #+begin_src elisp
      (use-package color-theme-sanityinc-tomorrow
        :disabled
        :ensure t
        :init (load-theme 'sanityinc-tomorrow-eighties 'noconfirm))
    #+end_src

*** Very cool theme
    #+begin_src elisp
      (use-package zerodark-theme
        :ensure t
        :after flycheck  ; TODO: make PR for fixing this
        :config
        (load-theme 'zerodark 'noconfirm))
        ;;(zerodark-setup-modeline-format))
    #+end_src
** Icons
   #+begin_src elisp
     (use-package all-the-icons
       :if window-system
       :ensure t
       :defer t
       :config
       (setq all-the-icons-mode-icon-alist
             `(,@all-the-icons-mode-icon-alist
               (package-menu-mode all-the-icons-octicon "package" :v-adjust 0.0))))
   #+end_src

   #+begin_src elisp
     (use-package all-the-icons-dired
       :if window-system
       :ensure t
       :hook
       (dired-mode . all-the-icons-dired-mode))
   #+end_src

   #+begin_src elisp
     (use-package all-the-icons-ivy
       :if window-system
       :ensure t
       :after ivy
       :custom
       (all-the-icons-ivy-buffer-commands '() "Don't use for buffers.")
       :config
       (unless (file-exists-p "~/.local/share/fonts/all-the-icons.ttf")
         (all-the-icons-install-fonts t))
       (all-the-icons-ivy-setup))
   #+end_src

** Whistles
   #+begin_src elisp
     (use-package time
       :ensure nil
       :custom
       (display-time-mode nil "Don't display time at modeline."))
   #+end_src

   #+begin_src elisp
     (use-package nyan-mode
       :ensure t
       :after zerodark-mode
       :custom
       (nyan-bar-length 16)
       :config
       (nyan-mode)
       (zerodark-modeline-setup-format))
   #+end_src

   #+begin_src elisp
     (use-package highlight-indent-guides
       :ensure t
       :defer t
       :delight
       :hook
       (prog-mode . highlight-indent-guides-mode)
       :custom
       (highlight-indent-guides-method 'character))
   #+end_src
* Buffer management
** COMMENT buffer selection
   #+begin_src elisp
     (use-package bs
       :ensure nil
       :bind ("M-z" . bs-show))
   #+end_src

** ibuffer
   #+begin_src elisp
     (use-package ibuffer
       :ensure nil
       :defer t
       :config
       (defalias 'list-buffers 'ibuffer))
   #+end_src

** ace-window
   Jump to window by number.
   #+begin_src elisp
     (use-package ace-window
       :ensure t
       :bind ("C-x w" . ace-window))
   #+end_src

* Dired
  Dired is very powerful file manager with tons of extensions.

  #+begin_src elisp
    (use-package dired
      :ensure nil
      :bind ([remap list-directory] . dired)
      :custom
      (dired-recursive-deletes 'top "Confirm deletion for all top non-empty directories.")
      (dired-dwim-target t "Try to guess target for actions."))
  #+end_src

  Extra dired things.
  #+begin_src elisp
    (use-package dired-x
      :ensure nil)
  #+end_src

  #+begin_src elisp
    (use-package dired-subtree
      :ensure t
      :after dired
      :bind
      (:map dired-mode-map
            ([?\t] . dired-subtree-toggle)))
  #+end_src

  Image preview support for dired.
  #+begin_src elisp
    (use-package image-dired
      :ensure nil)

    (use-package image-dired+
      :ensure t
      :after image-dired)
  #+end_src

* Navigation
** Window navigation
   #+begin_src elisp
     (use-package window
       :ensure nil
       :bind ("M-o" . other-window))
   #+end_src

** Paragraph movement
   #+begin_src elisp
     (use-package paragraphs
       :ensure nil
       :preface (provide 'paragraphs)
       :bind (("M-n" . #'forward-paragraph)
              ("M-p" . #'backward-paragraph)))
   #+end_src
** Imenu jumps
   #+begin_src elisp
     (use-package imenu
       :ensure nil
       :bind (("C-c C-j" . imenu)
              ("M-i" . imenu))
       :custom
       (imenu-auto-rescan t)
       (imenu-use-popup-menu nil))
   #+end_src

** Avy
   #+begin_src elisp
     (use-package avy
       :ensure t
       :bind (("C-c j" . avy-goto-word-or-subword-1)
              ("C-:" . avy-goto-char)
              ("C-'" . avy-goto-char-2)))
   #+end_src

* Editing
** Delete selection
   #+begin_src elisp
     (use-package delsel
       :ensure nil
       :config
       (delete-selection-mode t))
   #+end_src
** Multiple cursors
   #+begin_src elisp
     (use-package multiple-cursors
       :ensure t
       :bind (("C-S-c C-S-c" . mc/edit-lines)
              ("C->" . mc/mark-next-like-this)
              ("C-<" . mc/mark-previous-like-this)
              ("C-c C-<" . mc/mark-all-like-this)))
   #+end_src

** Copy & Paste things

*** Copy as format
    #+begin_src elisp
      (use-package copy-as-format
        :ensure t
        :bind
        (:prefix-map
         copy-as-format-prefix-map
         :prefix "C-x c"
         ("f" . copy-as-format)
         ("a" . copy-as-format-asciidoc)
         ("b" . copy-as-format-bitbucket)
         ("d" . copy-as-format-disqus)
         ("g" . copy-as-format-github)
         ("l" . copy-as-format-gitlab)
         ("c" . copy-as-format-hipchat)
         ("h" . copy-as-format-html)
         ("j" . copy-as-format-jira)
         ("m" . copy-as-format-markdown)
         ("w" . copy-as-format-mediawiki)
         ("o" . copy-as-format-org-mode)
         ("p" . copy-as-format-pod)
         ("r" . copy-as-format-rst)
         ("s" . copy-as-format-slack)))
    #+end_src

*** Links
    Useful package for manipulating links anywhere in emacs.
    #+begin_src elisp
      (use-package link-hint
        :ensure t
        :bind
        (:map ctl-x-map
              ("M-l c" . link-hint-copy-link)
              ("M-l o" . link-hint-open-link)
              ("M-l p" . link-hint-open-link-at-point)))
    #+end_src

* Password management
  Emacs interface for excellent [[https://www.passwordstore.org/][pass]] utility.
  #+begin_src elisp
    (use-package password-store
      :ensure t)
  #+end_src
* Shell tools
  #+begin_src elisp
    (use-package shell
      :ensure nil
      :ensure-system-package zsh
      :custom
      (explicit-shell-file-name (executable-find "zsh") "Default inferior shell."))
  #+end_src

** Eshell appearance
  Show command execution status at fringe.
  #+begin_src elisp
    (use-package eshell-fringe-status
      :ensure t
      :hook
      (eshell-mode . eshell-fringe-status-mode))
  #+end_src

  Prompt customization.
  #+begin_src elisp
    (use-package eshell-prompt-extras
      :ensure t
      :custom
      (eshell-prompt-function #'epe-theme-lambda))
  #+end_src

** Eshell completion and suggestion
   #+begin_src elisp
     (use-package esh-autosuggest
       :ensure t
       :hook
       (eshell-mode . esh-autosuggest-mode))
   #+end_src

   #+begin_src elisp
     (use-package esh-help
       :ensure t
       :defer t
       :config
       (setup-esh-help-eldoc))
   #+end_src

   Eshell =z= port.
   #+begin_src elisp
     (use-package eshell-z
       :ensure t
       :after eshell)
   #+end_src

** Quickly open eshell (or something else) in project
  #+begin_src elisp
    (use-package eshell-toggle
      :ensure t
      :bind
      ("M-`" . eshell-toggle)
      :custom
      (eshell-toggle-use-projectile-root t)
      (eshell-toggle-run-command "ls"))
  #+end_src

* Path
** Syncing PATH
   #+begin_src elisp
       (use-package exec-path-from-shell
         :ensure t
         :config
         (exec-path-from-shell-initialize))
   #+end_src

** Autosaves
   Don't spawn them across the filesystem.
   #+begin_src elisp
     (use-package files
       :ensure nil
       :custom
       (require-final-newline t)
       (delete-old-versions t)
       (backup-directory-alist
        `((".*" . ,(expand-file-name (concat user-emacs-directory "autosaves/")))))
       (auto-save-file-name-transforms
        `((".*" ,(expand-file-name (concat user-emacs-directory "autosaves/")) t))))

   #+end_src

** Quick emacs configuration file access
   #+begin_src elisp
     (use-package my-config
       :ensure nil
       :after counsel
       :preface
       (defun my-config-open ()
         (interactive)
         (find-file (concat user-emacs-directory "init.el")))

       (defun my-config-open-readme ()
         (interactive)
         (find-file (concat user-emacs-directory "readme.org")))

       (defun my-config-eval ()
         (interactive)
         (load-file (concat user-emacs-directory "init.el")))

       (defun my-config-open-and-search ()
         (interactive)
         (my-config-open)
         (counsel-grep-or-swiper))

       (provide 'my-config)

       :bind
       (:map mode-specific-map
             ("e o" . #'my-config-open)
             ("e r" . #'my-config-open-readme)
             ("e e" . #'my-config-eval)
             ("e s" . #'my-config-open-and-search)))
   #+end_src
* Autocomplete
** Prescient
   #+begin_src elisp
     (use-package prescient
       :ensure t)
   #+end_src

** Company
   #+begin_src elisp
     (use-package company
       :ensure t
       :delight
       :bind
       (:map company-active-map
             ("C-n" . company-select-next-or-abort)
             ("C-p" . company-select-previous-or-abort))
       :hook
       (after-init . global-company-mode))
   #+end_src

   #+begin_src elisp
     (use-package company-quickhelp
       :ensure t
       :custom
       (company-quickhelp-delay 3)
       :config
       (company-quickhelp-mode 1))
   #+end_src

   #+begin_src elisp
     (use-package company-shell
       :ensure t
       :config
       (add-to-list 'company-backends 'company-shell))
   #+end_src

** Counsel
   The silver searcher (ag) is the faster alternative for =grep=.
   #+begin_src elisp
     (use-package ag
       :ensure t)
   #+end_src

   #+begin_src elisp
     (use-package counsel
       :ensure t
       :delight
       :defer nil
       :bind (([remap menu-bar-open] . counsel-tmm)
              ([remap insert-char] . counsel-unicode-char)
              ([remap isearch-forward] . counsel-grep-or-swiper)
              ([remap isearch-backward] . counsel-grep-or-swiper))
       :config
       (counsel-mode))
   #+end_src

   #+begin_src elisp
     (use-package counsel-projectile
       :ensure t
       :after ag counsel projectile
       :bind
       ("C-c p s" . counsel-projectile-ag)
       :config
       (counsel-projectile-mode))
   #+end_src

   #+begin_src elisp
     (use-package counsel-dash
       :ensure t
       :after counsel eww
       :requires eww
       :bind
       ;; (:map mode-specific-map ("d i" . counsel-dash-install-docset)
       ;;                         ("d u" . counsel-dash-uninstall-docset))
       ;;                          (""))
       :config
       (add-hook 'python-mode-hook (lambda () (setq-local counsel-dash-docsets '("Python"))))
       :custom
       (counsel-dash-browser-func 'eww-browse-url))
   #+end_src

** Swiper
   #+begin_src elisp
     (use-package swiper
       :ensure t
       :delight
       :defer nil
       :bind
       (([remap isearch-forward-symbol-at-point] . #'swiper-thing-at-point)))
   #+end_src

** Ivy
   #+begin_src elisp
     (use-package ivy
       :ensure t
       :delight
       :custom
       (ivy-use-virtual-buffers t)
       (ivy-re-builders-alist '((t . ivy--regex-plus) (t . ivy--regex-fuzzy)))
       (ivy-count-format "%d/%d " "Show anzu-like counter.")
       (ivy-use-selectable-prompt t "Make the prompt line selectable.")
       :custom-face
       (ivy-current-match ((t (:inherit 'hl-line))))
       :bind
       (:map ivy-minibuffer-map
             ("C-r" . ivy-previous-line-or-history))
       :config
       (ivy-mode t))

     (use-package ivy-rich
       :ensure t
       :after ivy
       :config
       (ivy-rich-mode))
   #+end_src

   #+begin_src elisp
     (use-package ivy-prescient
       :ensure t
       :after ivy prescient
       :config
       (ivy-prescient-mode))
   #+end_src

* Containers and remote servers
** Tramp
   #+begin_src elisp
     (use-package tramp
       :ensure nil
       :defer t
       :custom
       (tramp-default-method "ssh" "SSH is slightly faster that default SCP."))

     ;; TODO
     (use-package counsel-tramp
       :after counsel tramp
       :hook ((counsel-tramp-pre-counsel . (lambda () (projectile-mode 0)))
              (consel-tramp-quit . (lambda () (projectile-mode 1))))
       :bind
       (:map mode-specific-map ("s s" . #'counsel-tramp)))
   #+end_src
*** Save local files as root
    #+begin_src elisp
      (use-package sudo-edit
        :ensure t
        :bind
        (:map ctl-x-map
              ("M-s" . #'sudo-edit)))
    #+end_src
** Docker
   #+begin_src elisp
     (use-package docker
       :ensure t
       :bind
       (:map mode-specific-map
             ("d" . docker)))

     (use-package dockerfile-mode
       :ensure t
       :defer t
       :mode "Dockerfile\\'")

     (use-package docker-compose-mode
       :ensure t
       :defer t)
   #+end_src
* Programming modes
** Common
*** Snippets
    #+begin_src elisp
      (use-package yasnippet
        :ensure t
        :config
        (yas-reload-all)
        (yas-minor-mode))
    #+end_src

*** Syntax checking and linting
    #+begin_src elisp
      (use-package flycheck
        :ensure t
        :delight
        :custom
        (flycheck-clang-language-standard "c++17")
        (flycheck-cppcheck-standards '("c++17"))
        :init (global-flycheck-mode))
    #+end_src

    #+begin_src elisp
      (use-package compile
        :ensure nil
        :bind ([f5] . recompile))
    #+end_src

    #+begin_src elisp
      (use-package ispell
        :ensure nil)
    #+end_src

    #+begin_src elisp
      (use-package smart-comment
        :ensure t
        :bind ("M-;" . smart-comment))
    #+end_src

    #+begin_src elisp
      (use-package fixmee
        :ensure t
        :delight
        (button-lock-mode)
        (fixmee-mode)
        :hook (prog-mode . global-fixmee-mode)
        :init (require 'button-lock))
    #+end_src

*** .env projectile integration
    #+begin_src elisp
      (use-package dotenv
        :ensure nil
        :after projectile
        :quelpa
        (dotenv :repo "pkulev/dotenv.el"
                :fetcher github :upgrade t)
        :config
        (defun dotenv-absolutify-path (path)
          "Make all pathes in PATH absolute using project root."
          (when (s-present? path)
            (let ((root (projectile-project-root)))
              (s-join ":" (mapcar (lambda (it) (f-join root it)) (s-split ":" path))))))

        (defun dotenv-projectile-hook ()
          "Projectile hook."
          (let ((path (dotenv-path (projectile-project-root))))
            (when (s-present? path)
              (dotenv-update-env (dotenv-load path))
              (let ((pythonpath (dotenv-absolutify-path (dotenv-get "PYTHONPATH" path))))
                (when pythonpath
                  (setq python-shell-extra-pythonpaths (s-split ":" pythonpath))
                  (setenv "PYTHONPATH" pythonpath))))))

        (add-to-list 'projectile-after-switch-project-hook #'dotenv-projectile-hook))
    #+end_src

*** Projectile
    #+begin_src elisp
      ;; TODO: c2 projectile integration
      (use-package projectile
        :ensure t
        :ensure-system-package (ag . the_silver_searcher)
        :defer nil
        :bind
        (:map mode-specific-map ("p" . projectile-command-map))
        :delight '(:eval (concat " [" (projectile-project-name) "]"))
        :custom
        (projectile-completion-system 'ivy)
        :config
        (projectile-mode))
    #+end_src

*** Metrics
    SLOC counting.
    #+begin_src elisp
      (use-package sloc
        :ensure nil
        :quelpa
        (sloc :repo "leoliu/sloc.el"
              :fetcher github :upgrade t))
    #+end_src

** Translations
   #+begin_src elisp
     (use-package po-mode
       :ensure t)
   #+end_src

** C/C++
   #+begin_src elisp
     (use-package cc-vars
       :ensure nil
       :hook
       (c-mode-hook . (lambda () (c-set-style "k&r")))
       (c++-mode-hook . (lambda () (c-set-style "k&r")))
       :custom
       (c-basic-offset 4))
   #+end_src

** Lisp
   #+begin_src elisp
     (use-package parinfer
       :ensure t
       :delight '(:eval (concat " p:" (symbol-name (parinfer-current-mode))))
       :hook ((emacs-lisp-mode . parinfer-mode)
              (common-lisp-mode . parinfer-mode)))
   #+end_src

   Interactive macro-expander.
   #+begin_src elisp
     (use-package macrostep
       :ensure t
       :bind
       (:map emacs-lisp-mode-map
             ("C-x m e" . #'macrostep-expand)
             ("C-x m c" . #'macrostep-collapse)
             ("C-x m m" . #'macrostep-mode)))
   #+end_src

*** Emacs Lisp
    #+begin_src elisp
      (use-package elisp-mode
        :ensure nil
        :delight "elisp")
    #+end_src

*** Common Lisp
    #+begin_src elisp
      (use-package lisp-mode
        :disabled
        :ensure nil
        :after flycheck
        :hook ((lisp-mode . (lambda () (setq flycheck-enabled-checkers '(sblint)))))
        :config
        (flycheck-define-checker sblint
          "A Common Lisp checker using `sblint'."
          ;; :command ("sblint" source)
          :command ("echo ok" source)
          :error-patterns
          ((error line-start (file-name) ":" line ": error: " (message) line-end))
          :modes lisp-mode)
        (add-to-list 'flycheck-checkers 'sblint))

      (use-package slime
        :disabled
        :ensure t
        :commands (slime)
        :requires slime-autoloads
        :custom
        (inferior-lisp-program (executable-find "sbcl"))
        (slime-contribs '(slime-fancy slime-asdf slime-indentation)))

      (use-package sly-asdf
        :ensure t
        :defer t)

      (use-package sly-quicklisp
        :ensure t
        :defer t)

      (use-package sly
        :ensure t
        :defer t
        :after (sly-asdf sly-quicklisp)
        :custom
        (inferior-lisp-program (executable-find "sbcl")))
      ;;  (sly-contribs '(sly-asdf sly-quicklisp)))

      ;; TODO:
      (use-package slime-company
        :disabled
        :ensure t
        :after slime
        :config
        (slime-setup '(slime-company)))
    #+end_src
*** Scheme
    #+begin_src elisp
      (use-package geiser
        :ensure t
        :ensure-system-package guile
        :bind
        ("C-c i" . geiser-insert-lambda)
        :custom
        (geiser-guile-binary "guile2.2")
        (geiser-default-implementation 'guile))
    #+end_src
** Python
   #+begin_src elisp
     (use-package python
       :ensure nil
       :delight python-mode)
   #+end_src

   #+begin_src elisp
     (use-package sphinx-doc
       :ensure t
       :delight
       :hook python-mode)
   #+end_src
*** ELPY
    #+begin_src elisp
      ;; TODO: install python modules
      (use-package elpy
        :ensure t
        :ensure-system-package (pylint-3 . python3-pylint)
        :delight
        (python-mode)
        (elpy-mode " py+")
        :commands (elpy-enable)
        :preface
        (defun elpy/my-python-mode-hook ()
          (company-mode 1)
          (company-quickhelp-mode)
          (elpy-mode)
          (pyvenv-tracking-mode)

          (setq flycheck-enabled-checkers '(python-pylint)
                flycheck-python-pylint-executable "pylint")

          (infer-indentation-style-python))

        :hook ((python-mode . elpy/my-python-mode-hook)
               (elpy-mode . flycheck-mode))
        :custom
        (elpy-syntax-check-command "pylint")
        (elpy-rpc-python-command "python3")
        (elpy-modules '(elpy-module-sane-defaults
                        elpy-module-company
                        elpy-module-eldoc
                        elpy-module-pyvenv  ; TODO
                        elpy-module-yasnippet))
        :config
        (elpy-enable))
    #+end_src
*** COMMENT LSP
    #+begin_src elisp
      (use-package lsp-mode
        :disabled
        :ensure t
        :hook (lsp-mode . company-mode)
        :custom
        (lsp-inhibit-message t)
        (lsp-before-save-edits t)
        (lsp-eldoc-render-all nil)
        (lsp-highlight-symbol-at-point nil))

      (use-package lsp-ui
        :disabled
        :ensure t
        :custom
        (lsp-ui-sideline-enable t)
        (lsp-ui-sideline-show-symbol t)
        (lsp-ui-sideline-show-hover t)
        (lsp-ui-sideline-show-code-actions t)
        (lsp-ui-sideline-ignore-duplicate t)
        (lsp-ui-sideline-update-mode 'point)
        :hook (lsp-mode . company-mode))

      (use-package company-lsp
        :disabled
        :ensure t
        :after lsp-ui
        :custom
        (company-lsp-cache-candidates 'auto)
        (company-lsp-enable-snippets t)
        (company-lsp-cache-candidates t)
        :config
        (push 'company-lsp company-backends))

      (use-package lsp-python-ms
        :disabled
        :ensure t
        :quelpa
        (lsp-python-ms :repo "andrew-christianson/lsp-python-ms"
                       :fetcher github :upgrade t)
        :hook (python-mode . lsp)
        :custom
        (lsp-python-ms-dir (expand-file-name "~/proj/python-language-server/output/bin/Release/"))
        (lsp-python-ms-executable "Microsoft.Python.LanguageServer"))
    #+end_src
** Web
*** JS
    #+begin_src elisp
      (use-package js
        :ensure nil
        :config
        :hook (js-mode . infer-indentation-style-js))
    #+end_src

*** HTML
    #+begin_src elisp
      (use-package mhtml-mode
        :ensure nil
        :defer t
        :custom
        (sgml-basic-offset 4))
    #+end_src
** Nim
   #+begin_src elisp
     (use-package nim-mode
       :ensure t
       :hook
       ((nim-mode . nimsuggest-mode)
        (nimsuggest-mode . flycheck-mode)))

     (use-package flycheck-nim
       :ensure t
       :after nim-mode)
   #+end_src

** Ocaml
   #+begin_src elisp
     (use-package tuareg
       :ensure t
       :defer t
       :custom
       (tuareg-match-patterns-aligned t))
     ;; (tuareg-prettify-symbols-full t)
     ;; TODO:
     ;; (add-hook 'tuareg-mode-hook
     ;;           (lambda()
     ;;             (when (functionp 'prettify-symbols-mode)
     ;;               (prettify-symbols-mode))))

     ;; (face-spec-set
     ;;  'tuareg-font-lock-constructor-face
     ;;  '((((class color) (background light)) (:foreground "SaddleBrown"))
     ;;    (((class color) (background dark)) (:foreground "burlywood1")))))
   #+end_src
** Rust
   #+begin_src elisp
     (use-package racer
       :hook ((rust-mode . racer-mode)
              (racer-mode . eldoc-mode))
       :custom
       (rust-rustfmt-bin "~/.cargo/bin/rustfmt")
       (rust-cargo-bin "~/.cargo/bin/cargo"))

   #+end_src
* Git things
** Magit
   #+begin_src elisp
     (use-package magit
       :ensure t
       :delight
       :custom
       (magit-bury-buffer-function #'quit-window)
       :bind
       (:map mode-specific-map
             :prefix-map magit-prefix-map
             :prefix "m"
             ("b" . #'magit-blame-addition)
             ("B" . #'magit-branch-create)
             ("c" . #'magit-checkout)
             ("C" . #'magit-commit-create)
             ("f" . #'magit-find-file)
             ("l" . #'magit-log-buffer-file)))
   #+end_src

** Git forges
   #+begin_src elisp
     (use-package forge
       :if (boundp 'my/private-forges)
       :ensure t
       :delight
       :after magit
       :config
       (add-to-list 'forge-alist
                    (append 'my/private-forges forge-github-repository)))
   #+end_src
* Bookmarks
  #+begin_src elisp
    (use-package bookmark
      :ensure nil
      :config
      (when (f-exists? bookmark-default-file)
        (bookmark-load bookmark-default-file t))
      :custom
      (bookmark-save-flag t)
      (bookmark-default-file (f-join user-emacs-directory "bookmarks")))

    (use-package bm
      :ensure t
      :bind (("<C-f2>" . bm-toggle)
             ("<f2>"   . bm-next)
             ("<S-f2>" . bm-previous)))
  #+end_src

* Email & Messengers
  #+begin_src elisp
    (use-package telega
      :if (> emacs-major-version 25)
      :ensure nil
      :quelpa
      (telega :repo "zevlg/telega.el"
              :fetcher github :upgrade t)
      :load-path "~/proj/telega.el"
      :commands (telega)
      :defer t
      :config
      (add-hook 'telega-root-mode-hook (lambda () (telega-notifications-mode 1))))
  #+end_src
* Productivity & task management

** Org mode
   #+begin_src elisp
     (use-package org
       ;; :hook (auto-save . org-save-all-org-buffers)
       :ensure t
       :init
       (defun +org/agenda-skip-all-siblings-but-first ()
         "Skip all but the first non-done entry."
         (let (should-skip-entry)
           (unless (+org/current-is-todo)
             (setq should-skip-entry t
                   (save-excursion
                     (while (and (not should-skip-entry) (org-goto-sibling t))
                       (when (+org/current-is-todo)
                         (setq should-skip-entry t))
                       (when should-skip-entry))
                     (or (outline-next-heading
                          (goto-char (point-max)))))))))

       (defun +org/current-is-todo ()
         (string= "TODO" (org-get-todo-state)))

       (defun +org/opened-buffer-files ()
         "Return the list of files currently opened in emacs."
         ;; (remove-if-not #'(lambda (x) (string-match "\\.org$" x))
         ;;                   (delq nil (mapcar #'buffer-file-name (buffer-list))))
         (delq nil
               (mapcar (lambda (x)
                         (if (and (buffer-file-name x)
                                  (string-match "\\.org$" (buffer-file-name x)))
                             (buffer-file-name x)))
                       (buffer-list))))

       (defun +org/all-org-files ()
         "Return the list of all org files in `org-directory'."

         (remove-if-not #'(lambda (x) (string-match "\\.org$" x))
                        (directory-files org-directory 'full)))

       :ensure org-plus-contrib
       :bind (("C-c a" . org-agenda)
              ("C-c b" . org-iswitchb)
              ("C-c l" . org-store-link)
              ("C-c c" . org-capture))
       :custom
       (org-directory "~/orgs")
       (org-log-done 'note)
       (org-log-refile t)
       (org-agenda-files `(,(concat org-directory "/inbox.org")
                           ,(concat org-directory "/next.org")
                           ,(concat org-directory "/tickler.org")))
       ;; (org-refile-targets '((+org/opened-buffer-files :maxlevel . 9)))
       (org-refile-targets '((+org/all-org-files :maxlevel . 9)))
       (org-refile-use-cache t)
       (org-capture-templates
        `(("t" "Todo [inbox]" entry
           (file+headline "/inbox.org" "Tasks")
           "* TODO %i%?")
          ("T" "Tickler" entry (file+headline "/tickler.org" "Tickler")
           "* %i%? \n %U")
          ("P" "Project [projects]" entry
           (file+headline "~/orgs/projects.org", "Projects")
           "* TODO %i%?")
          ("p" "Protocol" entry
           (file+headline "~/orgs/links.org" "Inbox")
           "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
          ("L" "Protocol Link" entry
           (file+headline "~/orgs/links.org" "Inbox")
           "* %? [[%:link][%:description]] \nCaptured On: %U")))
       (org-todo-keywords '((sequence
                             "NEXT(n)" "TODO(t)" "INPROGRESS(p)" "WAITING(w)"
                             "|" "DONE(d)" "CANCELLED(c)")))
       (org-refile-use-outline-path 'file)
       (org-outline-path-complete-in-steps nil)
       ;; (org-refile-targets '(("~/orgs/next.org" :maxlevel . 3)
       ;;                       ("~/orgs/someday.org" :level . 1)
       ;;                       ("~/orgs/tickler.org" :maxlevel . 2)
       ;;                       ("~/orgs/future-projects.org" :level . 1)))
       (org-agenda-custom-commands
        '(("o" "At the office" tags-todo "@office"
           ((org-agenda-overriding-header "Office")
            (org-agenda-skip-function #'+org/agenda-skip-all-siblings-but-first)))))
       :config
       ;; (run-with-idle-timer 300 t (lambda ()
       ;;                              (org-refile-cache-clear)
       ;;                              (org-refile-get-targets)))
       (org-babel-do-load-languages
        'org-babel-load-languages '((emacs-lisp . t)
                                    (python . t)
                                    (shell . t)
                                    (scheme . t)))
       (add-to-list 'org-structure-template-alist '("ss" . "src scheme"))
       (add-to-list 'org-structure-template-alist '("sp" . "src python"))
       (add-to-list 'org-structure-template-alist '("se" . "src elisp")))

     (use-package org-tempo
       :ensure nil)

     (use-package org-protocol
       :ensure nil)

     (use-package org-bullets
       :ensure t
       :custom
       ;; org-bullets-bullet-list
       ;; default: ◉ ○ ✸ ✿
       ;; large: ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶
       ;; Small: ► • ★ ▸
       ;; (org-bullets-bullet-list '("•"))
       ;; others: ▼, ↴, ⬎, ⤷,…, and ⋱
       ;; (org-ellipsis "…")
       (org-ellipsis "⤵")
       :hook
       (org-mode . org-bullets-mode))
   #+end_src

*** Generate Table of Contents
    #+begin_src elisp
      (use-package toc-org
        :ensure t
        :hook
        (org-mode . toc-org-mode))
    #+end_src

*** Org babel
    #+begin_src elisp
      (use-package ob-mongo
        :ensure t)

      (use-package ob-async
        :ensure t)
    #+end_src

*** Yankpad
    #+begin_src elisp
      (use-package yankpad
        :ensure t
        :defer org
        :bind
        ("C-c y m" . yankpad-map)
        ("C-c y e" . yankpad-expand)
        :config
        (add-to-list 'company-backends #'company-yankpad))
    #+end_src

*** Utils
    #+begin_src elisp
      (defun link-message ()
        "Show org-link in minibuffer."
        (interactive)
        (let ((object (org-element-context)))
          (when (eq (car object) 'message)
            (message "%s" (org-element-property :raw-link object)))))
    #+end_src

** Productivity
   #+begin_src elisp
     (use-package org-pomodoro
       :ensure nil
       :quelpa
       (org-pomodoro :repo "pkulev/org-pomodoro"
                     :fetcher github :branch "feature/customize-mode-line"
                     :upgrade t)
       :bind
       (:map mode-specific-map ("o p" . org-pomodoro))
       :custom
       (org-pomodoro-format " 🍅 %s"))
   #+end_src

   #+begin_src elisp
     (use-package jira-markup-mode
       :ensure t
       :defer t)
   #+end_src

** Calendar
   #+begin_src elisp
     (use-package calendar
       :ensure nil
       :commands (calendar)
       :custom
       (calendar-week-start-day 1))
   #+end_src

** Corporative services
   #+begin_src elisp
     (use-package org-jira
       :if (boundp 'my/private-jira-url)
       :ensure t
       :defer t
       :custom
       (jiralib-url my/private-jira-url))

     ;; TODO:
     ;; https://sourceforge.net/p/confluence-el/wiki/Home/
     (use-package confluence
       :if (boundp 'my/private-confluence-url)
       :ensure t
       :defer t
       :custom
       (confluence-url my/private-confluence-url)
       (confluence-default-space-alist (my/private-confluence-default-space)))
   #+end_src

* After config read hook
  This hook can be useful for overriding something.
  For example you can change theme (bad solution however, because emacs will blink too much
  while eating through =init.el=). Place this into =private.el=:
  #+begin_src elisp :tangle no
    (load-theme 'wombat 'noconfirm)
  #+end_src

  Run all the hooks!
  #+begin_src elisp
    (run-hooks 'my/after-config-read-hook)
  #+end_src
* Local variables
  Tangle config on save hook.
  #+begin_src elisp :tangle no
    ;; Local Variables:
    ;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
    ;; flycheck-disabled-checkers: (emacs-lisp-checkdoc)
    ;; End:
  #+end_src

  Disable annoying checkdoc linter for cases if I want to open init.el.
  #+begin_src elisp
    ;; Local Variables:
    ;; flycheck-disabled-checkers: (emacs-lisp-checkdoc)
    ;; End:
  #+end_src
